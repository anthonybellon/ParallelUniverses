// src/utils/generateAlternateHistory.ts

import { ChatOpenAI } from '@langchain/openai';
import { ChatPromptTemplate } from '@langchain/core/prompts';
import { JsonOutputFunctionsParser } from 'langchain/output_parsers';
import { createOpenAIFnRunnable } from 'langchain/chains/openai_functions';
import { z } from 'zod';

const eventSchema = z.object({
  date: z.string(),
  title: z.string(),
  description: z.string(),
});

export const generateAlternateHistory = async (
  event: { date: string; title: string; description: string },
  question: string,
): Promise<string> => {
  try {
    // Validate the event data
    eventSchema.parse(event);

    // Define the OpenAI function
    const openAIFunction = {
      name: 'generate_alternate_history',
      description:
        'Generate an alternate history based on the given event and question',
      parameters: {
        type: 'object',
        properties: {
          alternateHistory: {
            type: 'string',
            description:
              'The detailed alternate history generated by the assistant',
          },
        },
        required: ['alternateHistory'],
      },
    };

    // Initialize the OpenAI chat model
    const model = new ChatOpenAI({
      apiKey: process.env.OPENAI_API_KEY!,
      model: 'gpt-4o-mini-2024-07-18',
      temperature: 0.7,
      streaming: false,
      verbose: true,
    });

    // Create the prompt template
    const promptContent = `
Event:
- Date: {date}
- Title: {title}
- Description: {description}

What if: "{question}"

Generate an alternate history scenario explaining how events might have unfolded differently from that point onward.

Please output the result by calling the function 'generate_alternate_history' with the 'alternateHistory' parameter containing your generated alternate history.

Do not include any additional text.
    `;

    const prompt = ChatPromptTemplate.fromMessages([['human', promptContent]]);

    // Create the output parser
    const outputParser = new JsonOutputFunctionsParser();

    // Create the runnable using createOpenAIFnRunnable
    const runnable = createOpenAIFnRunnable({
      functions: [openAIFunction],
      llm: model,
      prompt,
      enforceSingleFunctionUsage: true,
      outputParser,
    });

    // Invoke the runnable with the necessary variables
    const response = await runnable.invoke({
      date: event.date,
      title: event.title,
      description: event.description,
      question: question,
    });

    // Extract the alternateHistory from the response
    const alternateHistory = (response as { alternateHistory: string })
      .alternateHistory;

    return alternateHistory;
  } catch (error) {
    console.error('Error generating alternate history:', error);
    throw error;
  }
};
